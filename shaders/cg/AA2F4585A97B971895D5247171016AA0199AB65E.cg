// profile sce_fp_psp2

#define cg_FragColor gl_FragColor
#define cg_FragData1 gl_FragColor
#define fract(x) frac(x)
#define inversesqrt(x) rsqrt(x)
#define samplerCube samplerCUBE
#define vec2 float2
#define vec3 float3
#define vec4 float4

vec4 tex(sampler2D samp, vec2 s) { return tex2D(samp, s); }
vec4 tex(samplerCube samp, vec3 s) { return texCUBE(samp, s); }

struct VertexInput {
    vec4 _uvSet01;
    vec4 _colorSet0;
    vec2 _uvSet2;
};

struct VertexOutput {
    vec4 _varying_colorSet0;
    vec2 _texcoord0;
    vec2 _texcoord1;
    vec2 _texcoord2;
    float _texcoord3;
};

struct FragmentOutput {
    vec4 _color[1];
};

static FragmentOutput _TMP8;
static vec3 _TMP4;
static vec4 _TMP3;
static vec4 _TMP2;
static vec4 _TMP1;
static VertexOutput _input1;
static vec4 _colorLayer00089;
static vec4 _colorLayer10089;
static vec4 _colorLayer20089;
static vec4 _TMP94;
static vec3 _TMP790095;
static vec4 _TMP98;
static vec3 _TMP780099;
static float _falloff0103;
static vec3 _b0105;

uniform vec4 _fog_color;
uniform vec4 _layer0_diffuse;
uniform vec4 _layer1_diffuse;
uniform vec4 _layer2_diffuse;
uniform vec4 _layer_kOpacities;
uniform sampler2D _layer0_sampler;
uniform sampler2D _layer1_sampler;
uniform sampler2D _layer2_sampler;

void main(
    vec4 cg_FrontColor : COLOR,
    vec4 cg_TexCoord1 : TEXCOORD1,
    vec4 cg_TexCoord3 : TEXCOORD3,
    vec4 cg_TexCoord0 : TEXCOORD0,
    vec4 cg_TexCoord2 : TEXCOORD2,

    vec4 out gl_FragColor : COLOR
) {


    _input1._texcoord3 = cg_TexCoord3.x;
    _input1._varying_colorSet0 = vec4(float(cg_FrontColor.x), float(cg_FrontColor.y), float(cg_FrontColor.z), float(cg_FrontColor.w));
    _TMP1 = tex(_layer0_sampler, cg_TexCoord0.xy);
    _colorLayer00089 = vec4(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z), float(_TMP1.w));
    _colorLayer00089.w = _colorLayer00089.w*_layer0_diffuse.w*_layer_kOpacities.x;
    _colorLayer00089 = _colorLayer00089*_input1._varying_colorSet0;
    _TMP2 = tex(_layer1_sampler, cg_TexCoord1.xy);
    _colorLayer10089 = vec4(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z), float(_TMP2.w));
    _colorLayer10089.w = _colorLayer10089.w*_layer1_diffuse.w;
    _colorLayer10089.xyz = _colorLayer10089.xyz*_input1._varying_colorSet0.xyz;
    _colorLayer10089.w = _colorLayer10089.w*_layer_kOpacities.y;
    _TMP790095 = _colorLayer00089.xyz*(1.00000000E+000 - _colorLayer10089.w) + _colorLayer10089.xyz*_colorLayer10089.w;
    _TMP94 = vec4(_TMP790095.x, _TMP790095.y, _TMP790095.z, 1.00000000E+000 - (1.00000000E+000 - _colorLayer00089.w)*(1.00000000E+000 - _colorLayer10089.w));
    _TMP3 = tex(_layer2_sampler, cg_TexCoord2.xy);
    _colorLayer20089 = vec4(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z), float(_TMP3.w));
    _colorLayer20089.w = _colorLayer20089.w*_layer2_diffuse.w;
    _colorLayer20089.xyz = _colorLayer20089.xyz*_input1._varying_colorSet0.xyz;
    _colorLayer20089.w = _colorLayer20089.w*_layer_kOpacities.z;
    _TMP780099 = _TMP94.xyz + _colorLayer20089.xyz*_colorLayer20089.w;
    _TMP98 = vec4(_TMP780099.x, _TMP780099.y, _TMP780099.z, _TMP94.w);
    _TMP8._color[0] = vec4(float(_TMP98.x), float(_TMP98.y), float(_TMP98.z), float(_TMP98.w));
    _falloff0103 = float(_input1._texcoord3);
    _b0105 = vec3(float(_TMP8._color[0].x), float(_TMP8._color[0].y), float(_TMP8._color[0].z));
    _TMP4 = _fog_color.xyz + _falloff0103*(_b0105 - _fog_color.xyz);
    _TMP8._color[0].xyz = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    cg_FragColor = _TMP8._color[0];
}
