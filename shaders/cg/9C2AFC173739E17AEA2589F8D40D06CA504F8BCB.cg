// profile sce_vp_psp2

#define fract(x) frac(x)
#define inversesqrt(x) rsqrt(x)
#define vec2 float2
#define vec3 float3
#define vec4 float4

struct VertexInput {
    vec4 _position;
    vec4 _normal;
    vec4 _colorSet0;
    vec4 _blendWeight0;
    vec4 _blendIndices0;
};

struct VertexOutput {
    vec4 _varying_position;
    vec4 _varying_colorSet0;
    vec4 _texcoord0;
    vec3 _texcoord1;
    vec2 _texcoord2;
    float _texcoord3;
};

struct FragmentOutput {
    vec4 _color[1];
};

static VertexOutput _TMP17;
static float _TMP2;
static float _TMP8;
static float _TMP1;
static float _TMP0;
static vec3 _TMP6;
static vec3 _TMP22;
static float _TMP12;
static float _TMP11;
static float _TMP14;
static float _TMP13;
static vec4 _TMP10;
static vec4 _TMP20;
static vec4 _TMP19[4];
static vec4 _TMP5;
static vec4 _C0094[4];
static vec3 _normal0096;
static vec3 _v0098;
static vec3 _r0100;
static vec3 _M0100[3];
static vec3 _r0102;
static vec3 _M0102[3];
static vec3 _v0104;
static vec3 _v0110;
static vec3 _TMP880110[3];
static vec3 _r0112;
static vec4 _skinMatrix00115[4];
static vec4 _skinMatrix10115[4];
static vec4 _r0117;
static vec4 _r0119;
static vec4 _r0123;
static vec4 _r0125;
static vec4 _r0131;
static vec4 _M0131[4];
static vec4 _v0136;
static vec4 _b0138;
static vec3 _r0147;
static float _b0151;
static float _a0153;
static vec3 _TMP154;
static vec3 _TMP155;
static vec3 _TMP156;
static vec3 _TMP157;
static vec3 _TMP158;
static vec3 _TMP159;
static vec3 _TMP160;
static vec3 _TMP161;
static vec3 _TMP162;
static vec3 _TMP163;
static vec3 _TMP164;
static vec3 _TMP165;
static vec3 _TMP166;
static vec3 _TMP167;
static vec3 _TMP168;
static vec3 _TMP169;
static vec3 _TMP170;
static vec3 _TMP171;

uniform vec4 _viewProj[4];
uniform vec4 _vs_view[4];
uniform vec4 _world[4];
uniform vec4 _ps2ShineMtx[4];
uniform vec4 _skinMatrix[36];
uniform vec4 _kTint;
uniform vec4 _fog_params;

void main(
    vec4 NORMAL,
    vec4 COLOR,
    vec4 BLENDWEIGHT0,
    vec4 BLENDINDICES0,
    vec4 cg_Vertex,

    vec4 out cg_FrontColor : COLOR,
    vec4 out cg_TexCoord1 : TEXCOORD1,
    vec4 out cg_TexCoord3 : TEXCOORD3,
    vec4 out cg_TexCoord0 : TEXCOORD0,
    vec4 out cg_TexCoord2 : TEXCOORD2,

    vec4 out gl_Position : POSITION,
    float out gl_PointSize : PSIZE
) {

    float _dist;
    float _dd;

    _C0094[0] = _world[0].x*_vs_view[0] + _world[0].y*_vs_view[1] + _world[0].z*_vs_view[2] + _world[0].w*_vs_view[3];
    _C0094[1] = _world[1].x*_vs_view[0] + _world[1].y*_vs_view[1] + _world[1].z*_vs_view[2] + _world[1].w*_vs_view[3];
    _C0094[2] = _world[2].x*_vs_view[0] + _world[2].y*_vs_view[1] + _world[2].z*_vs_view[2] + _world[2].w*_vs_view[3];
    _C0094[3] = _world[3].x*_vs_view[0] + _world[3].y*_vs_view[1] + _world[3].z*_vs_view[2] + _world[3].w*_vs_view[3];
    _TMP19[0] = vec4(float(_C0094[0].x), float(_C0094[0].y), float(_C0094[0].z), float(_C0094[0].w));
    _TMP19[1] = vec4(float(_C0094[1].x), float(_C0094[1].y), float(_C0094[1].z), float(_C0094[1].w));
    _TMP19[2] = vec4(float(_C0094[2].x), float(_C0094[2].y), float(_C0094[2].z), float(_C0094[2].w));
    _TMP19[3] = vec4(float(_C0094[3].x), float(_C0094[3].y), float(_C0094[3].z), float(_C0094[3].w));
    _normal0096 = NORMAL.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP154.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].x;
    _TMP154.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].y;
    _TMP154.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].z;
    _TMP155.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].x;
    _TMP155.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].y;
    _TMP155.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].z;
    _TMP156.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].x;
    _TMP156.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].y;
    _TMP156.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].z;
    _M0100[0] = vec3(float(_TMP154.x), float(_TMP154.y), float(_TMP154.z));
    _M0100[1] = vec3(float(_TMP155.x), float(_TMP155.y), float(_TMP155.z));
    _M0100[2] = vec3(float(_TMP156.x), float(_TMP156.y), float(_TMP156.z));
    _r0100 = _normal0096.x*_M0100[0];
    _r0100 = _r0100 + _normal0096.y*_M0100[1];
    _r0100 = _r0100 + _normal0096.z*_M0100[2];
    _TMP157.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].x;
    _TMP157.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].y;
    _TMP157.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].z;
    _TMP158.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].x;
    _TMP158.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].y;
    _TMP158.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].z;
    _TMP159.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].x;
    _TMP159.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].y;
    _TMP159.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].z;
    _M0102[0] = vec3(float(_TMP157.x), float(_TMP157.y), float(_TMP157.z));
    _M0102[1] = vec3(float(_TMP158.x), float(_TMP158.y), float(_TMP158.z));
    _M0102[2] = vec3(float(_TMP159.x), float(_TMP159.y), float(_TMP159.z));
    _r0102 = _normal0096.x*_M0102[0];
    _r0102 = _r0102 + _normal0096.y*_M0102[1];
    _r0102 = _r0102 + _normal0096.z*_M0102[2];
    _v0104 = _r0100*BLENDWEIGHT0.x + _r0102*(1.00000000E+000 - BLENDWEIGHT0.x);
    _TMP13 = dot(vec3(float(_v0104.x), float(_v0104.y), float(_v0104.z)), vec3(float(_v0104.x), float(_v0104.y), float(_v0104.z)));
    _TMP11 = float(_TMP13);
    _TMP14 = inversesqrt(float(_TMP11));
    _TMP12 = float(_TMP14);
    _v0098 = _TMP12*_v0104;
    _v0110 = vec3(float(_v0098.x), float(_v0098.y), float(_v0098.z));
    _TMP160.x = _TMP19[0].x;
    _TMP161.y = _TMP19[0].y;
    _TMP162.z = _TMP19[0].z;
    _TMP880110[0] = vec3(float(_TMP160.x), float(_TMP161.y), float(_TMP162.z));
    _TMP163.x = _TMP19[1].x;
    _TMP164.y = _TMP19[1].y;
    _TMP165.z = _TMP19[1].z;
    _TMP880110[1] = vec3(float(_TMP163.x), float(_TMP164.y), float(_TMP165.z));
    _TMP166.x = _TMP19[2].x;
    _TMP167.y = _TMP19[2].y;
    _TMP168.z = _TMP19[2].z;
    _TMP880110[2] = vec3(float(_TMP166.x), float(_TMP167.y), float(_TMP168.z));
    _r0112 = _v0110.x*_TMP880110[0];
    _r0112 = _r0112 + _v0110.y*_TMP880110[1];
    _r0112 = _r0112 + _v0110.z*_TMP880110[2];
    _TMP22 = vec3(float(_r0112.x), float(_r0112.y), float(_r0112.z));
    _skinMatrix00115[0] = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)];
    _skinMatrix00115[1] = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)];
    _skinMatrix00115[2] = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)];
    _skinMatrix00115[3] = _skinMatrix[(4*int(BLENDINDICES0.x) + 3)];
    _skinMatrix10115[0] = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)];
    _skinMatrix10115[1] = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)];
    _skinMatrix10115[2] = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)];
    _skinMatrix10115[3] = _skinMatrix[(4*int(BLENDINDICES0.y) + 3)];
    _r0117 = cg_Vertex.x*_skinMatrix00115[0];
    _r0117 = _r0117 + cg_Vertex.y*_skinMatrix00115[1];
    _r0117 = _r0117 + cg_Vertex.z*_skinMatrix00115[2];
    _r0117 = _r0117 + cg_Vertex.w*_skinMatrix00115[3];
    _r0119 = cg_Vertex.x*_skinMatrix10115[0];
    _r0119 = _r0119 + cg_Vertex.y*_skinMatrix10115[1];
    _r0119 = _r0119 + cg_Vertex.z*_skinMatrix10115[2];
    _r0119 = _r0119 + cg_Vertex.w*_skinMatrix10115[3];
    _TMP5 = vec4(float((_r0117*float(BLENDWEIGHT0.x) + _r0119*float(BLENDWEIGHT0.y)).x), float((_r0117*float(BLENDWEIGHT0.x) + _r0119*float(BLENDWEIGHT0.y)).y), float((_r0117*float(BLENDWEIGHT0.x) + _r0119*float(BLENDWEIGHT0.y)).z), float((_r0117*float(BLENDWEIGHT0.x) + _r0119*float(BLENDWEIGHT0.y)).w));
    _TMP20 = vec4(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z), float(_TMP5.w));
    _r0123 = _TMP20.x*_world[0];
    _r0123 = _r0123 + _TMP20.y*_world[1];
    _r0123 = _r0123 + _TMP20.z*_world[2];
    _r0123 = _r0123 + _TMP20.w*_world[3];
    _r0125 = _r0123.x*_viewProj[0];
    _r0125 = _r0125 + _r0123.y*_viewProj[1];
    _r0125 = _r0125 + _r0123.z*_viewProj[2];
    _r0125 = _r0125 + _r0123.w*_viewProj[3];
    _M0131[0] = vec4(float(_TMP19[0].x), float(_TMP19[0].y), float(_TMP19[0].z), float(_TMP19[0].w));
    _M0131[1] = vec4(float(_TMP19[1].x), float(_TMP19[1].y), float(_TMP19[1].z), float(_TMP19[1].w));
    _M0131[2] = vec4(float(_TMP19[2].x), float(_TMP19[2].y), float(_TMP19[2].z), float(_TMP19[2].w));
    _M0131[3] = vec4(float(_TMP19[3].x), float(_TMP19[3].y), float(_TMP19[3].z), float(_TMP19[3].w));
    _r0131 = _TMP20.x*_M0131[0];
    _r0131 = _r0131 + _TMP20.y*_M0131[1];
    _r0131 = _r0131 + _TMP20.z*_M0131[2];
    _r0131 = _r0131 + _TMP20.w*_M0131[3];
    _TMP17._texcoord0.xyzw = vec4(float(_TMP22.x), float(_TMP22.y), float(_TMP22.z), 1.00000000E+000);
    _v0136 = vec4(float(float(((COLOR*_kTint)*2.00000000E+000).x)), float(float(((COLOR*_kTint)*2.00000000E+000).y)), float(float(((COLOR*_kTint)*2.00000000E+000).z)), float(float(((COLOR*_kTint)*2.00000000E+000).w)));
    _b0138 = vec4(float(_v0136.x), float(_v0136.y), float(_v0136.z), float(_v0136.w));
    _TMP10 = (_b0138);
    _TMP17._varying_colorSet0 = vec4(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z), float(_TMP10.w));
    _TMP13 = dot(vec3(float(_TMP22.x), float(_TMP22.y), float(_TMP22.z)), vec3(float(_TMP22.x), float(_TMP22.y), float(_TMP22.z)));
    _TMP11 = float(_TMP13);
    _TMP14 = inversesqrt(float(_TMP11));
    _TMP12 = float(_TMP14);
    _TMP6 = _TMP12*_TMP22;
    _TMP169.x = _ps2ShineMtx[0].x;
    _TMP169.y = _ps2ShineMtx[0].y;
    _TMP169.z = _ps2ShineMtx[0].z;
    _r0147 = _TMP6.x*_TMP169;
    _TMP170.x = _ps2ShineMtx[1].x;
    _TMP170.y = _ps2ShineMtx[1].y;
    _TMP170.z = _ps2ShineMtx[1].z;
    _r0147 = _r0147 + _TMP6.y*_TMP170;
    _TMP171.x = _ps2ShineMtx[2].x;
    _TMP171.y = _ps2ShineMtx[2].y;
    _TMP171.z = _ps2ShineMtx[2].z;
    _r0147 = _r0147 + _TMP6.z*_TMP171;
    _TMP17._texcoord2.xy = vec2(float(_r0147.x), float(_r0147.y));
    _TMP0 = length(_r0131.xyz);
    _b0151 = _TMP0 - float(_fog_params.x);
    _TMP1 = max(0.00000000E+000, _b0151);
    _dist = float(_TMP1);
    _a0153 = _dist/_fog_params.z;
    _TMP8 = min(float(_a0153), 1.00000000E+000);
    _TMP2 = float(_TMP8);
    _dd = float((1.00000000E+000 - float(_TMP2)));
    _TMP17._texcoord3 = float(_dd);
    cg_TexCoord2.xy = _TMP17._texcoord2;
    cg_TexCoord0 = _TMP17._texcoord0;
    cg_TexCoord3.x = _TMP17._texcoord3;
    cg_TexCoord1.xyz = _r0131.xyz;
    gl_Position = _r0125;
    cg_FrontColor = vec4(float(_TMP17._varying_colorSet0.x), float(_TMP17._varying_colorSet0.y), float(_TMP17._varying_colorSet0.z), float(_TMP17._varying_colorSet0.w));

    gl_PointSize = 1.0f;
}
