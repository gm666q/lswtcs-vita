// profile sce_vp_psp2

#define fract(x) frac(x)
#define inversesqrt(x) rsqrt(x)
#define vec2 float2
#define vec3 float3
#define vec4 float4

struct VertexInput {
    vec4 _position;
    vec4 _normal;
    vec4 _uvSet01;
    vec4 _colorSet0;
};

struct VertexOutput {
    vec4 _varying_position;
    vec4 _varying_colorSet0;
    vec4 _texcoord0;
    vec3 _texcoord1;
    vec2 _texcoord2;
    float _texcoord3;
};

struct FragmentOutput {
    vec4 _color[1];
};

static VertexOutput _TMP9;
static float _TMP2;
static float _TMP4;
static float _TMP1;
static float _TMP0;
static vec4 _TMP6;
static vec2 _TMP14;
static vec3 _TMP13;
static vec4 _TMP11[4];
static vec4 _C0085[4];
static vec3 _v0089;
static vec3 _TMP810089[3];
static vec3 _r0091;
static vec4 _r0098;
static vec4 _v0098;
static vec4 _r0100;
static vec4 _r0106;
static vec4 _M0106[4];
static vec4 _v0112;
static vec4 _b0114;
static float _b0118;
static float _a0120;
static vec3 _TMP121;
static vec3 _TMP122;
static vec3 _TMP123;
static vec3 _TMP124;
static vec3 _TMP125;
static vec3 _TMP126;
static vec3 _TMP127;
static vec3 _TMP128;
static vec3 _TMP129;

uniform vec4 _viewProj[4];
uniform vec4 _vs_view[4];
uniform vec4 _world[4];
uniform vec4 _kTint;
uniform vec4 _fog_params;
uniform vec4 _lightmapOffset;

void main(
    vec4 NORMAL,
    vec4 TEXCOORD0,
    vec4 COLOR,
    vec4 cg_Vertex,

    vec4 out cg_FrontColor : COLOR,
    vec4 out cg_TexCoord1 : TEXCOORD1,
    vec4 out cg_TexCoord3 : TEXCOORD3,
    vec4 out cg_TexCoord0 : TEXCOORD0,
    vec4 out cg_TexCoord2 : TEXCOORD2,

    vec4 out gl_Position : POSITION,
    float out gl_PointSize : PSIZE
) {

    float _dist;
    float _dd;

    _C0085[0] = _world[0].x*_vs_view[0] + _world[0].y*_vs_view[1] + _world[0].z*_vs_view[2] + _world[0].w*_vs_view[3];
    _C0085[1] = _world[1].x*_vs_view[0] + _world[1].y*_vs_view[1] + _world[1].z*_vs_view[2] + _world[1].w*_vs_view[3];
    _C0085[2] = _world[2].x*_vs_view[0] + _world[2].y*_vs_view[1] + _world[2].z*_vs_view[2] + _world[2].w*_vs_view[3];
    _C0085[3] = _world[3].x*_vs_view[0] + _world[3].y*_vs_view[1] + _world[3].z*_vs_view[2] + _world[3].w*_vs_view[3];
    _TMP11[0] = vec4(float(_C0085[0].x), float(_C0085[0].y), float(_C0085[0].z), float(_C0085[0].w));
    _TMP11[1] = vec4(float(_C0085[1].x), float(_C0085[1].y), float(_C0085[1].z), float(_C0085[1].w));
    _TMP11[2] = vec4(float(_C0085[2].x), float(_C0085[2].y), float(_C0085[2].z), float(_C0085[2].w));
    _TMP11[3] = vec4(float(_C0085[3].x), float(_C0085[3].y), float(_C0085[3].z), float(_C0085[3].w));
    _v0089 = vec3(float((NORMAL.xyz*2.00000000E+000 - 1.00000000E+000).x), float((NORMAL.xyz*2.00000000E+000 - 1.00000000E+000).y), float((NORMAL.xyz*2.00000000E+000 - 1.00000000E+000).z));
    _TMP121.x = _TMP11[0].x;
    _TMP122.y = _TMP11[0].y;
    _TMP123.z = _TMP11[0].z;
    _TMP810089[0] = vec3(float(_TMP121.x), float(_TMP122.y), float(_TMP123.z));
    _TMP124.x = _TMP11[1].x;
    _TMP125.y = _TMP11[1].y;
    _TMP126.z = _TMP11[1].z;
    _TMP810089[1] = vec3(float(_TMP124.x), float(_TMP125.y), float(_TMP126.z));
    _TMP127.x = _TMP11[2].x;
    _TMP128.y = _TMP11[2].y;
    _TMP129.z = _TMP11[2].z;
    _TMP810089[2] = vec3(float(_TMP127.x), float(_TMP128.y), float(_TMP129.z));
    _r0091 = _v0089.x*_TMP810089[0];
    _r0091 = _r0091 + _v0089.y*_TMP810089[1];
    _r0091 = _r0091 + _v0089.z*_TMP810089[2];
    _TMP13 = vec3(float(_r0091.x), float(_r0091.y), float(_r0091.z));
    _TMP14.xy = vec2(float((vec2(float(TEXCOORD0.z), float(TEXCOORD0.w)) + _lightmapOffset.xy).x), float((vec2(float(TEXCOORD0.z), float(TEXCOORD0.w)) + _lightmapOffset.xy).y));
    _v0098 = vec4(cg_Vertex.x, cg_Vertex.y, cg_Vertex.z, 1.00000000E+000);
    _r0098 = _v0098.x*_world[0];
    _r0098 = _r0098 + _v0098.y*_world[1];
    _r0098 = _r0098 + _v0098.z*_world[2];
    _r0098 = _r0098 + _v0098.w*_world[3];
    _r0100 = _r0098.x*_viewProj[0];
    _r0100 = _r0100 + _r0098.y*_viewProj[1];
    _r0100 = _r0100 + _r0098.z*_viewProj[2];
    _r0100 = _r0100 + _r0098.w*_viewProj[3];
    _M0106[0] = vec4(float(_TMP11[0].x), float(_TMP11[0].y), float(_TMP11[0].z), float(_TMP11[0].w));
    _M0106[1] = vec4(float(_TMP11[1].x), float(_TMP11[1].y), float(_TMP11[1].z), float(_TMP11[1].w));
    _M0106[2] = vec4(float(_TMP11[2].x), float(_TMP11[2].y), float(_TMP11[2].z), float(_TMP11[2].w));
    _M0106[3] = vec4(float(_TMP11[3].x), float(_TMP11[3].y), float(_TMP11[3].z), float(_TMP11[3].w));
    _r0106 = cg_Vertex.x*_M0106[0];
    _r0106 = _r0106 + cg_Vertex.y*_M0106[1];
    _r0106 = _r0106 + cg_Vertex.z*_M0106[2];
    _r0106 = _r0106 + cg_Vertex.w*_M0106[3];
    _TMP9._texcoord0.xyzw = vec4(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z), 1.00000000E+000);
    _TMP9._texcoord2.xy = vec2(float(_TMP14.x), float(_TMP14.y));
    _v0112 = vec4(float(float(((COLOR*_kTint)*2.00000000E+000).x)), float(float(((COLOR*_kTint)*2.00000000E+000).y)), float(float(((COLOR*_kTint)*2.00000000E+000).z)), float(float(((COLOR*_kTint)*2.00000000E+000).w)));
    _b0114 = vec4(float(_v0112.x), float(_v0112.y), float(_v0112.z), float(_v0112.w));
    _TMP6 = (_b0114);
    _TMP9._varying_colorSet0 = vec4(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z), float(_TMP6.w));
    _TMP0 = length(_r0106.xyz);
    _b0118 = _TMP0 - float(_fog_params.x);
    _TMP1 = max(0.00000000E+000, _b0118);
    _dist = float(_TMP1);
    _a0120 = _dist/_fog_params.z;
    _TMP4 = min(float(_a0120), 1.00000000E+000);
    _TMP2 = float(_TMP4);
    _dd = float((1.00000000E+000 - float(_TMP2)));
    _TMP9._texcoord3 = float(_dd);
    cg_TexCoord2.xy = _TMP9._texcoord2;
    cg_TexCoord0 = _TMP9._texcoord0;
    cg_TexCoord3.x = _TMP9._texcoord3;
    cg_TexCoord1.xyz = _r0106.xyz;
    gl_Position = _r0100;
    cg_FrontColor = vec4(float(_TMP9._varying_colorSet0.x), float(_TMP9._varying_colorSet0.y), float(_TMP9._varying_colorSet0.z), float(_TMP9._varying_colorSet0.w));

    gl_PointSize = 1.0f;
}
