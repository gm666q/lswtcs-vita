// profile sce_fp_psp2

#define cg_FragColor gl_FragColor
#define cg_FragData1 gl_FragColor
#define fract(x) frac(x)
#define inversesqrt(x) rsqrt(x)
#define samplerCube samplerCUBE
#define vec2 float2
#define vec3 float3
#define vec4 float4

vec4 tex(sampler2D samp, vec2 s) { return tex2D(samp, s); }
vec4 tex(samplerCube samp, vec3 s) { return texCUBE(samp, s); }

struct VS_IN {
    vec4 _color1;
    vec2 _texcoord1;
    vec2 _size;
};

struct VS_OUT {
    vec4 _color;
    vec2 _texcoord;
    vec3 _fog;
};

struct PSOutput {
    vec4 _color2;
    vec4 _normal;
};

static vec4 _TMP0;
static float _c0017;

uniform sampler2D _diffuse_tex;
uniform vec4 _fog_color;
uniform vec2 _alphaTestParameters;

void main(
    vec4 cg_FrontColor : COLOR,
    vec4 cg_TexCoord1 : TEXCOORD1,
    vec4 cg_TexCoord0 : TEXCOORD0,

    vec4 out gl_FragColor : COLOR
) {

    vec4 _vColor;

    _TMP0 = tex(_diffuse_tex, cg_TexCoord0.xy);
    _vColor = _TMP0*cg_FrontColor;
    _vColor.xyz = _fog_color.xyz + cg_TexCoord1.x*(_vColor.xyz - _fog_color.xyz);
    _c0017 = _vColor.w*float(_alphaTestParameters.x) - float(_alphaTestParameters.y);
    if (_c0017 < 0.00000000E+000) { // if begin
        discard;
    } // end if
    cg_FragData1 = vec4( 5.00000000E-001, 5.00000000E-001, 5.00000000E-001, 1.00000000E+000);
    cg_FragColor = _vColor;
}
