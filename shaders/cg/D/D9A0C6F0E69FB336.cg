// profile sce_vp_psp2

#define fract(x) frac(x)
#define inversesqrt(x) rsqrt(x)
#define vec2 float2
#define vec3 float3
#define vec4 float4

struct VertexInput {
    vec4 _position;
    vec4 _colorSet0;
};

struct VertexOutput {
    vec4 _varying_position;
    vec4 _varying_colorSet0;
    float _texcoord0;
};

struct FragmentOutput {
    vec4 _color[1];
};

static VertexOutput _TMP9;
static float _TMP2;
static float _TMP4;
static float _TMP1;
static float _TMP0;
static vec4 _TMP6;
static vec4 _TMP11[4];
static vec4 _C0069[4];
static vec4 _r0074;
static vec4 _v0074;
static vec4 _r0076;
static vec4 _r0082;
static vec4 _M0082[4];
static vec4 _v0085;
static vec4 _b0087;
static float _b0091;
static float _a0093;

uniform vec4 _viewProj[4];
uniform vec4 _vs_view[4];
uniform vec4 _world[4];
uniform vec4 _kTint;
uniform vec4 _fog_params;

void main(
    vec4 COLOR,
    vec4 cg_Vertex,

    vec4 out cg_FrontColor : COLOR,
    vec4 out cg_TexCoord0 : TEXCOORD0,

    vec4 out gl_Position : POSITION,
    float out gl_PointSize : PSIZE
) {

    float _dist;
    float _dd;

    _C0069[0] = _world[0].x*_vs_view[0] + _world[0].y*_vs_view[1] + _world[0].z*_vs_view[2] + _world[0].w*_vs_view[3];
    _C0069[1] = _world[1].x*_vs_view[0] + _world[1].y*_vs_view[1] + _world[1].z*_vs_view[2] + _world[1].w*_vs_view[3];
    _C0069[2] = _world[2].x*_vs_view[0] + _world[2].y*_vs_view[1] + _world[2].z*_vs_view[2] + _world[2].w*_vs_view[3];
    _C0069[3] = _world[3].x*_vs_view[0] + _world[3].y*_vs_view[1] + _world[3].z*_vs_view[2] + _world[3].w*_vs_view[3];
    _TMP11[0] = vec4(float(_C0069[0].x), float(_C0069[0].y), float(_C0069[0].z), float(_C0069[0].w));
    _TMP11[1] = vec4(float(_C0069[1].x), float(_C0069[1].y), float(_C0069[1].z), float(_C0069[1].w));
    _TMP11[2] = vec4(float(_C0069[2].x), float(_C0069[2].y), float(_C0069[2].z), float(_C0069[2].w));
    _TMP11[3] = vec4(float(_C0069[3].x), float(_C0069[3].y), float(_C0069[3].z), float(_C0069[3].w));
    _v0074 = vec4(cg_Vertex.x, cg_Vertex.y, cg_Vertex.z, 1.00000000E+000);
    _r0074 = _v0074.x*_world[0];
    _r0074 = _r0074 + _v0074.y*_world[1];
    _r0074 = _r0074 + _v0074.z*_world[2];
    _r0074 = _r0074 + _v0074.w*_world[3];
    _r0076 = _r0074.x*_viewProj[0];
    _r0076 = _r0076 + _r0074.y*_viewProj[1];
    _r0076 = _r0076 + _r0074.z*_viewProj[2];
    _r0076 = _r0076 + _r0074.w*_viewProj[3];
    _M0082[0] = vec4(float(_TMP11[0].x), float(_TMP11[0].y), float(_TMP11[0].z), float(_TMP11[0].w));
    _M0082[1] = vec4(float(_TMP11[1].x), float(_TMP11[1].y), float(_TMP11[1].z), float(_TMP11[1].w));
    _M0082[2] = vec4(float(_TMP11[2].x), float(_TMP11[2].y), float(_TMP11[2].z), float(_TMP11[2].w));
    _M0082[3] = vec4(float(_TMP11[3].x), float(_TMP11[3].y), float(_TMP11[3].z), float(_TMP11[3].w));
    _r0082 = cg_Vertex.x*_M0082[0];
    _r0082 = _r0082 + cg_Vertex.y*_M0082[1];
    _r0082 = _r0082 + cg_Vertex.z*_M0082[2];
    _r0082 = _r0082 + cg_Vertex.w*_M0082[3];
    _v0085 = vec4(float(float(((COLOR*_kTint)*2.00000000E+000).x)), float(float(((COLOR*_kTint)*2.00000000E+000).y)), float(float(((COLOR*_kTint)*2.00000000E+000).z)), float(float(((COLOR*_kTint)*2.00000000E+000).w)));
    _b0087 = vec4(float(_v0085.x), float(_v0085.y), float(_v0085.z), float(_v0085.w));
    _TMP6 = (_b0087);
    _TMP9._varying_colorSet0 = vec4(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z), float(_TMP6.w));
    _TMP0 = length(_r0082.xyz);
    _b0091 = _TMP0 - float(_fog_params.x);
    _TMP1 = max(0.00000000E+000, _b0091);
    _dist = float(_TMP1);
    _a0093 = _dist/_fog_params.z;
    _TMP4 = min(float(_a0093), 1.00000000E+000);
    _TMP2 = float(_TMP4);
    _dd = float((1.00000000E+000 - float(_TMP2)));
    _TMP9._texcoord0 = float(_dd);
    cg_TexCoord0.x = _TMP9._texcoord0;
    gl_Position = _r0076;
    cg_FrontColor = vec4(float(_TMP9._varying_colorSet0.x), float(_TMP9._varying_colorSet0.y), float(_TMP9._varying_colorSet0.z), float(_TMP9._varying_colorSet0.w));

    gl_PointSize = 1.0f;
}
