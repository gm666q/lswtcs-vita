// profile sce_fp_psp2

#define cg_FragColor gl_FragColor
#define cg_FragData1 gl_FragColor
#define fract(x) frac(x)
#define inversesqrt(x) rsqrt(x)
#define samplerCube samplerCUBE
#define vec2 float2
#define vec3 float3
#define vec4 float4

vec4 tex(sampler2D samp, vec2 s) { return tex2D(samp, s); }
vec4 tex(samplerCube samp, vec3 s) { return texCUBE(samp, s); }

struct VertexInput {
    vec4 _colorSet0;
    vec2 _uvSet0;
};

struct VertexOutput {
    vec4 _varying_colorSet0;
    vec2 _texcoord0;
};

struct FragmentOutput {
    vec4 _color[1];
};

static FragmentOutput _TMP5;
static vec4 _TMP1;
static VertexOutput _input1;
static vec4 _colorLayer00063;

uniform vec4 _layer0_diffuse;
uniform vec4 _layer_kOpacities;
uniform sampler2D _layer0_sampler;

void main(
    vec4 cg_FrontColor : COLOR,
    vec4 cg_TexCoord0 : TEXCOORD0,

    vec4 out gl_FragColor : COLOR
) {


    _input1._varying_colorSet0 = vec4(float(cg_FrontColor.x), float(cg_FrontColor.y), float(cg_FrontColor.z), float(cg_FrontColor.w));
    _TMP1 = tex(_layer0_sampler, cg_TexCoord0.xy);
    _colorLayer00063 = vec4(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z), float(_TMP1.w));
    _colorLayer00063.w = _colorLayer00063.w*_layer0_diffuse.w*_layer_kOpacities.x;
    _colorLayer00063 = _colorLayer00063*_input1._varying_colorSet0;
    _TMP5._color[0] = vec4(float(_colorLayer00063.x), float(_colorLayer00063.y), float(_colorLayer00063.z), float(_colorLayer00063.w));
    cg_FragColor = _TMP5._color[0];
}
