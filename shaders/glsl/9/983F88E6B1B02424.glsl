//SharedShaders/0xc1fba5f0.ios_vcode uklgonzale Wed Mar 12 14:32:03 2014

precision highp float;



struct VertexInput {
    vec4 _position;
    vec4 _normal;
    vec4 _tangent;
    vec4 _colorSet0;
    vec4 _blendWeight0;
    vec4 _blendIndices0;
};

struct VertexOutput {
    vec4 _varying_position;
    vec4 _varying_colorSet0;
    vec4 _texcoord0;
    vec3 _texcoord1;
    vec3 _texcoord2;
    float _texcoord3;
};

struct FragmentOutput {
    vec4 _color[1];
};

VertexOutput _TMP16;
float _TMP2;
float _TMP7;
float _TMP1;
float _TMP0;
vec4 _TMP9;
vec3 _TMP22;
vec3 _TMP21;
vec4 _TMP19;
vec4 _TMP18[4];
vec4 _TMP6;
float _TMP11;
float _TMP10;
float _TMP13;
float _TMP12;
vec4 _C0093[4];
vec3 _normal0095;
vec3 _v0097;
vec3 _r0099;
vec3 _M0099[3];
vec3 _r0101;
vec3 _M0101[3];
vec3 _v0103;
vec3 _v0109;
vec3 _TMP870109[3];
vec3 _r0111;
vec3 _tangent0113;
vec3 _v0115;
vec3 _r0117;
vec3 _M0117[3];
vec3 _r0119;
vec3 _M0119[3];
vec3 _v0121;
vec3 _v0127;
vec3 _TMP870127[3];
vec3 _r0129;
vec4 _skinMatrix00132[4];
vec4 _skinMatrix10132[4];
vec4 _r0134;
vec4 _r0136;
vec4 _r0140;
vec4 _r0142;
vec4 _r0148;
vec4 _M0148[4];
vec4 _v0154;
vec4 _b0156;
float _b0160;
float _a0162;
attribute vec4 NORMAL;
attribute vec4 TANGENT;
attribute vec4 COLOR;
attribute vec4 BLENDWEIGHT0;
attribute vec4 BLENDINDICES0;
vec3 _TMP163;
vec3 _TMP164;
vec3 _TMP165;
vec3 _TMP166;
vec3 _TMP167;
vec3 _TMP168;
vec3 _TMP169;
vec3 _TMP170;
vec3 _TMP171;
vec3 _TMP172;
vec3 _TMP173;
vec3 _TMP174;
vec3 _TMP175;
vec3 _TMP176;
vec3 _TMP177;
vec3 _TMP178;
vec3 _TMP179;
vec3 _TMP180;
vec3 _TMP181;
vec3 _TMP182;
vec3 _TMP183;
vec3 _TMP184;
vec3 _TMP185;
vec3 _TMP186;
vec3 _TMP187;
vec3 _TMP188;
vec3 _TMP189;
vec3 _TMP190;
vec3 _TMP191;
vec3 _TMP192;
uniform vec4 _viewProj[4];
uniform vec4 _vs_view[4];
uniform vec4 _world[4];
uniform vec4 _skinMatrix[36];
uniform vec4 _kTint;
uniform vec4 _fog_params;
attribute vec4 cg_Vertex;
varying vec4 cg_FrontColor;
varying vec4 cg_TexCoord1;
varying vec4 cg_TexCoord3;
varying vec4 cg_TexCoord0;
varying vec4 cg_TexCoord2;

 void main()
{

    float _dist;
    float _dd;

    _C0093[0] = _world[0].x*_vs_view[0] + _world[0].y*_vs_view[1] + _world[0].z*_vs_view[2] + _world[0].w*_vs_view[3];
    _C0093[1] = _world[1].x*_vs_view[0] + _world[1].y*_vs_view[1] + _world[1].z*_vs_view[2] + _world[1].w*_vs_view[3];
    _C0093[2] = _world[2].x*_vs_view[0] + _world[2].y*_vs_view[1] + _world[2].z*_vs_view[2] + _world[2].w*_vs_view[3];
    _C0093[3] = _world[3].x*_vs_view[0] + _world[3].y*_vs_view[1] + _world[3].z*_vs_view[2] + _world[3].w*_vs_view[3];
    _TMP18[0] = vec4(float(_C0093[0].x), float(_C0093[0].y), float(_C0093[0].z), float(_C0093[0].w));
    _TMP18[1] = vec4(float(_C0093[1].x), float(_C0093[1].y), float(_C0093[1].z), float(_C0093[1].w));
    _TMP18[2] = vec4(float(_C0093[2].x), float(_C0093[2].y), float(_C0093[2].z), float(_C0093[2].w));
    _TMP18[3] = vec4(float(_C0093[3].x), float(_C0093[3].y), float(_C0093[3].z), float(_C0093[3].w));
    _normal0095 = NORMAL.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP163.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].x;
    _TMP163.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].y;
    _TMP163.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].z;
    _TMP164.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].x;
    _TMP164.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].y;
    _TMP164.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].z;
    _TMP165.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].x;
    _TMP165.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].y;
    _TMP165.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].z;
    _M0099[0] = vec3(float(_TMP163.x), float(_TMP163.y), float(_TMP163.z));
    _M0099[1] = vec3(float(_TMP164.x), float(_TMP164.y), float(_TMP164.z));
    _M0099[2] = vec3(float(_TMP165.x), float(_TMP165.y), float(_TMP165.z));
    _r0099 = _normal0095.x*_M0099[0];
    _r0099 = _r0099 + _normal0095.y*_M0099[1];
    _r0099 = _r0099 + _normal0095.z*_M0099[2];
    _TMP166.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].x;
    _TMP166.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].y;
    _TMP166.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].z;
    _TMP167.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].x;
    _TMP167.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].y;
    _TMP167.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].z;
    _TMP168.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].x;
    _TMP168.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].y;
    _TMP168.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].z;
    _M0101[0] = vec3(float(_TMP166.x), float(_TMP166.y), float(_TMP166.z));
    _M0101[1] = vec3(float(_TMP167.x), float(_TMP167.y), float(_TMP167.z));
    _M0101[2] = vec3(float(_TMP168.x), float(_TMP168.y), float(_TMP168.z));
    _r0101 = _normal0095.x*_M0101[0];
    _r0101 = _r0101 + _normal0095.y*_M0101[1];
    _r0101 = _r0101 + _normal0095.z*_M0101[2];
    _v0103 = _r0099*BLENDWEIGHT0.x + _r0101*(1.00000000E+000 - BLENDWEIGHT0.x);
    _TMP12 = dot(vec3(float(_v0103.x), float(_v0103.y), float(_v0103.z)), vec3(float(_v0103.x), float(_v0103.y), float(_v0103.z)));
    _TMP10 = float(_TMP12);
    _TMP13 = inversesqrt(float(_TMP10));
    _TMP11 = float(_TMP13);
    _v0097 = _TMP11*_v0103;
    _v0109 = vec3(float(_v0097.x), float(_v0097.y), float(_v0097.z));
    _TMP169.x = _TMP18[0].x;
    _TMP170.y = _TMP18[0].y;
    _TMP171.z = _TMP18[0].z;
    _TMP870109[0] = vec3(float(_TMP169.x), float(_TMP170.y), float(_TMP171.z));
    _TMP172.x = _TMP18[1].x;
    _TMP173.y = _TMP18[1].y;
    _TMP174.z = _TMP18[1].z;
    _TMP870109[1] = vec3(float(_TMP172.x), float(_TMP173.y), float(_TMP174.z));
    _TMP175.x = _TMP18[2].x;
    _TMP176.y = _TMP18[2].y;
    _TMP177.z = _TMP18[2].z;
    _TMP870109[2] = vec3(float(_TMP175.x), float(_TMP176.y), float(_TMP177.z));
    _r0111 = _v0109.x*_TMP870109[0];
    _r0111 = _r0111 + _v0109.y*_TMP870109[1];
    _r0111 = _r0111 + _v0109.z*_TMP870109[2];
    _TMP21 = vec3(float(_r0111.x), float(_r0111.y), float(_r0111.z));
    _tangent0113 = -(TANGENT.xyz*2.00000000E+000 - 1.00000000E+000);
    _TMP178.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].x;
    _TMP178.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].y;
    _TMP178.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)].z;
    _TMP179.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].x;
    _TMP179.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].y;
    _TMP179.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)].z;
    _TMP180.x = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].x;
    _TMP180.y = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].y;
    _TMP180.z = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)].z;
    _M0117[0] = vec3(float(_TMP178.x), float(_TMP178.y), float(_TMP178.z));
    _M0117[1] = vec3(float(_TMP179.x), float(_TMP179.y), float(_TMP179.z));
    _M0117[2] = vec3(float(_TMP180.x), float(_TMP180.y), float(_TMP180.z));
    _r0117 = _tangent0113.x*_M0117[0];
    _r0117 = _r0117 + _tangent0113.y*_M0117[1];
    _r0117 = _r0117 + _tangent0113.z*_M0117[2];
    _TMP181.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].x;
    _TMP181.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].y;
    _TMP181.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)].z;
    _TMP182.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].x;
    _TMP182.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].y;
    _TMP182.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)].z;
    _TMP183.x = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].x;
    _TMP183.y = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].y;
    _TMP183.z = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)].z;
    _M0119[0] = vec3(float(_TMP181.x), float(_TMP181.y), float(_TMP181.z));
    _M0119[1] = vec3(float(_TMP182.x), float(_TMP182.y), float(_TMP182.z));
    _M0119[2] = vec3(float(_TMP183.x), float(_TMP183.y), float(_TMP183.z));
    _r0119 = _tangent0113.x*_M0119[0];
    _r0119 = _r0119 + _tangent0113.y*_M0119[1];
    _r0119 = _r0119 + _tangent0113.z*_M0119[2];
    _v0121 = _r0117*BLENDWEIGHT0.x + _r0119*(1.00000000E+000 - BLENDWEIGHT0.x);
    _TMP12 = dot(vec3(float(_v0121.x), float(_v0121.y), float(_v0121.z)), vec3(float(_v0121.x), float(_v0121.y), float(_v0121.z)));
    _TMP10 = float(_TMP12);
    _TMP13 = inversesqrt(float(_TMP10));
    _TMP11 = float(_TMP13);
    _v0115 = _TMP11*_v0121;
    _v0127 = vec3(float(_v0115.x), float(_v0115.y), float(_v0115.z));
    _TMP184.x = _TMP18[0].x;
    _TMP185.y = _TMP18[0].y;
    _TMP186.z = _TMP18[0].z;
    _TMP870127[0] = vec3(float(_TMP184.x), float(_TMP185.y), float(_TMP186.z));
    _TMP187.x = _TMP18[1].x;
    _TMP188.y = _TMP18[1].y;
    _TMP189.z = _TMP18[1].z;
    _TMP870127[1] = vec3(float(_TMP187.x), float(_TMP188.y), float(_TMP189.z));
    _TMP190.x = _TMP18[2].x;
    _TMP191.y = _TMP18[2].y;
    _TMP192.z = _TMP18[2].z;
    _TMP870127[2] = vec3(float(_TMP190.x), float(_TMP191.y), float(_TMP192.z));
    _r0129 = _v0127.x*_TMP870127[0];
    _r0129 = _r0129 + _v0127.y*_TMP870127[1];
    _r0129 = _r0129 + _v0127.z*_TMP870127[2];
    _TMP22 = vec3(float(_r0129.x), float(_r0129.y), float(_r0129.z));
    _skinMatrix00132[0] = _skinMatrix[(4*int(BLENDINDICES0.x) + 0)];
    _skinMatrix00132[1] = _skinMatrix[(4*int(BLENDINDICES0.x) + 1)];
    _skinMatrix00132[2] = _skinMatrix[(4*int(BLENDINDICES0.x) + 2)];
    _skinMatrix00132[3] = _skinMatrix[(4*int(BLENDINDICES0.x) + 3)];
    _skinMatrix10132[0] = _skinMatrix[(4*int(BLENDINDICES0.y) + 0)];
    _skinMatrix10132[1] = _skinMatrix[(4*int(BLENDINDICES0.y) + 1)];
    _skinMatrix10132[2] = _skinMatrix[(4*int(BLENDINDICES0.y) + 2)];
    _skinMatrix10132[3] = _skinMatrix[(4*int(BLENDINDICES0.y) + 3)];
    _r0134 = cg_Vertex.x*_skinMatrix00132[0];
    _r0134 = _r0134 + cg_Vertex.y*_skinMatrix00132[1];
    _r0134 = _r0134 + cg_Vertex.z*_skinMatrix00132[2];
    _r0134 = _r0134 + cg_Vertex.w*_skinMatrix00132[3];
    _r0136 = cg_Vertex.x*_skinMatrix10132[0];
    _r0136 = _r0136 + cg_Vertex.y*_skinMatrix10132[1];
    _r0136 = _r0136 + cg_Vertex.z*_skinMatrix10132[2];
    _r0136 = _r0136 + cg_Vertex.w*_skinMatrix10132[3];
    _TMP6 = vec4(float((_r0134*float(BLENDWEIGHT0.x) + _r0136*float(BLENDWEIGHT0.y)).x), float((_r0134*float(BLENDWEIGHT0.x) + _r0136*float(BLENDWEIGHT0.y)).y), float((_r0134*float(BLENDWEIGHT0.x) + _r0136*float(BLENDWEIGHT0.y)).z), float((_r0134*float(BLENDWEIGHT0.x) + _r0136*float(BLENDWEIGHT0.y)).w));
    _TMP19 = vec4(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z), float(_TMP6.w));
    _r0140 = _TMP19.x*_world[0];
    _r0140 = _r0140 + _TMP19.y*_world[1];
    _r0140 = _r0140 + _TMP19.z*_world[2];
    _r0140 = _r0140 + _TMP19.w*_world[3];
    _r0142 = _r0140.x*_viewProj[0];
    _r0142 = _r0142 + _r0140.y*_viewProj[1];
    _r0142 = _r0142 + _r0140.z*_viewProj[2];
    _r0142 = _r0142 + _r0140.w*_viewProj[3];
    _M0148[0] = vec4(float(_TMP18[0].x), float(_TMP18[0].y), float(_TMP18[0].z), float(_TMP18[0].w));
    _M0148[1] = vec4(float(_TMP18[1].x), float(_TMP18[1].y), float(_TMP18[1].z), float(_TMP18[1].w));
    _M0148[2] = vec4(float(_TMP18[2].x), float(_TMP18[2].y), float(_TMP18[2].z), float(_TMP18[2].w));
    _M0148[3] = vec4(float(_TMP18[3].x), float(_TMP18[3].y), float(_TMP18[3].z), float(_TMP18[3].w));
    _r0148 = _TMP19.x*_M0148[0];
    _r0148 = _r0148 + _TMP19.y*_M0148[1];
    _r0148 = _r0148 + _TMP19.z*_M0148[2];
    _r0148 = _r0148 + _TMP19.w*_M0148[3];
    _TMP16._texcoord0.xyzw = vec4(float(_TMP21.x), float(_TMP21.y), float(_TMP21.z), 1.00000000E+000);
    _TMP16._texcoord2.xyz = vec3(float(_TMP22.x), float(_TMP22.y), float(_TMP22.z));
    _v0154 = vec4(float(float(((COLOR*_kTint)*2.00000000E+000).x)), float(float(((COLOR*_kTint)*2.00000000E+000).y)), float(float(((COLOR*_kTint)*2.00000000E+000).z)), float(float(((COLOR*_kTint)*2.00000000E+000).w)));
    _b0156 = vec4(float(_v0154.x), float(_v0154.y), float(_v0154.z), float(_v0154.w));
    _TMP9 = (_b0156);
    _TMP16._varying_colorSet0 = vec4(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z), float(_TMP9.w));
    _TMP0 = length(_r0148.xyz);
    _b0160 = _TMP0 - float(_fog_params.x);
    _TMP1 = max(0.00000000E+000, _b0160);
    _dist = float(_TMP1);
    _a0162 = _dist/_fog_params.z;
    _TMP7 = min(float(_a0162), 1.00000000E+000);
    _TMP2 = float(_TMP7);
    _dd = float((1.00000000E+000 - float(_TMP2)));
    _TMP16._texcoord3 = float(_dd);
    cg_TexCoord2.xyz = _TMP16._texcoord2;
    cg_TexCoord0 = _TMP16._texcoord0;
    cg_TexCoord3.x = _TMP16._texcoord3;
    cg_TexCoord1.xyz = _r0148.xyz;
    gl_Position = _r0142;
    cg_FrontColor = vec4(float(_TMP16._varying_colorSet0.x), float(_TMP16._varying_colorSet0.y), float(_TMP16._varying_colorSet0.z), float(_TMP16._varying_colorSet0.w));
    return;
} 
